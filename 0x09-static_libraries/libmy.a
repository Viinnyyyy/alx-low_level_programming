!<arch>
0-isupper.c/    0           0     0     644     203       `
#include "main.h"

/**
 *_isupper - gets upper cased letters
 *
 *@c: character
 *Return: 1 if upper and 0 if not
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}

0-memset.c/     0           0     0     644     231       `
#include "main.h"
/**
 * *_memset - function
 *@n: counter
 *@s: char
 *@b: char
 *Return: char
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     410       `
#include "main.h"
#include <stddef.h>
#include <stdio.h>
#include <string.h>
/**
 **_strcat - concatenate strings
 *
 *@dest: destination
 *@src: source
	 *Return: char
	 */
char *_strcat(char *dest, char *src)
{
	size_t dest_len = strlen(dest);
	size_t i;
	size_t n = strlen(src);

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[dest_len + i] = src[i];
	}
	dest[dest_len + i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     404       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {

		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     149       `
#include "main.h"

/**
 *_isdigit - something
 *
 *@c: character
 *Return: return integer
 */

int _isdigit(int c)
{
	return (c >= 48 && c <= 57);
}

1-memcpy.c/     0           0     0     644     248       `
#include "main.h"
/**
 * *_memcpy - function
 *@n: counter
 *@dest: char
 *@src: char
 *Return: char
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     425       `
#include "main.h"
#include <stddef.h>
#include <stdio.h>
#include <string.h>
/**
 **_strncat - concatenate strings
 *
 *@n: maximum characters from src
 *@dest: destination
 *@src: source
	 *Return: char
	 */
char *_strncat(char *dest, char *src, int n)
{
	size_t dest_len = strlen(dest);
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[dest_len + i] = src[i];
	}
	dest[dest_len + i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     232       `
#include "main.h"
/**
 * *_strchr - function
 *
 *@s: char
 *@c: char
 *Return: char
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     219       `
#include <string.h>
#include "main.h"


/**
 *_strlen - returns string length
 *
 *@s: string value
 *
 *Return: length
 */
int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
	{
		len++;
	}

	return (len);
}

2-strncpy.c/    0           0     0     644     395       `
#include "main.h"
#include <stddef.h>
#include <stdio.h>
#include <string.h>
/**
 *_strncpy - concatenate strings
 *
 *@n: maximum characters from src
 *@dest: destination
 *@src: source
 *Return: char
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     186       `
#include "main.h"

/**
 *_islower - check the code
 *@c: the ASCII equivakent
 *
 *Return: char.
 **/
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
		return (0);
}
3-puts.c/       0           0     0     644     244       `
#include "main.h"
/**
 *_puts - print to std output
 *
 *@str: accepts string
 *Return: void
 */
void _puts(char *str)
{
	int i = 0;

	while (i >= 0)
	{
		if (str[i] == '\0')
		{
			_putchar('\n');
			break;
		}
		_putchar(str[i]);
		i++;
	}
}
3-strcmp.c/     0           0     0     644     346       `
#include "main.h"
#include <stddef.h>
#include <stdio.h>
#include <string.h>
/**
 **_strcmp - compare string
 *
 *
 *@s1: first string
 *@s2: second string
 *Return: char
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}
	return (0);
}
3-strspn.c/     0           0     0     644     545       `
#include "main.h"

/**
 * _strspn - Gets the length of a prefix substring.
 * @s: The string to be searched.
 * @accept: The prefix to be measured.
 *
 * Return: The number of bytes in s which
 * consist only of bytes from accept.
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int index;

	while (*s)
	{
		for (index = 0; accept[index]; index++)
		{
			if (*s == accept[index])
			{
				bytes++;
				break;
			}
			else if (accept[index + 1] == '\0')
			{
				return (bytes);
			}
		}
		s++;
	}
	return (bytes);
}

4-isalpha.c/    0           0     0     644     186       `
#include "main.h"

/**
 *_isalpha - check the code
 *@c: the ASCII equivakent
 *
 *Return: char.
 **/
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
	{
		return (1);
	}
		return (0);
}
4-strpbrk.c/    0           0     0     644     504       `
#include "main.h"
#include <stdio.h>

/**
 * *_strpbrk - searches a string for any of a set of bytes
 * @s: string to search
 * @accept: stringcontaining the bytes to look for
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     675       `
#include "main.h"

/**
 * _strstr - Locates a substring.
 * @haystack: The string to be searched.
 * @needle: The substring to be located.
 *
 * Return: If the substring is located - a pointer to the beginning
 *                                       of the located substring.
 * If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     158       `
#include "main.h"

/**
 *_abs - check the code
 *@n: changes any number to positive
 *
 *Return: int.
 **/
int _abs(int n)
{
	return (n >= 0 ? n : n * -1);
}
9-strcpy.c/     0           0     0     644     239       `
#include "main.h"
/**
 * _strcpy - copies stribg
 * @dest: destination
 * @src: source
 * Return: char
 */
char *_strcpy(char *dest, char *src)
{
	int i = -1;

	do {
		i++;
		dest[i] = src[i];
	} while (src[i] != '\0');

	return (dest);
}

_putchar.c/     0           0     0     644     265       `
#include <unistd.h>
#include "main.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

